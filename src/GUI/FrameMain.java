/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import DAO.EmpDAO;
import DTO.Employee;
import java.awt.Color;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ðŸŒ¸ë°©íƒ„ì†Œë…„ë‹¨ðŸŒ¸
 */
public class FrameMain extends javax.swing.JFrame {

    /**
     * Creates new form FrameMain
     */
    boolean find=true;
    public FrameMain() {
        initComponents();
         setLocationRelativeTo(null);
        this.setTitle("Employee Management");
        tblEmp.getColumnModel().getColumn(4).setMinWidth(0);
        tblEmp.getColumnModel().getColumn(4).setMaxWidth(0);
        tblEmp.getColumnModel().getColumn(5).setMinWidth(0);
        tblEmp.getColumnModel().getColumn(5).setMaxWidth(0); 
        tblEmp.getColumnModel().getColumn(6).setMinWidth(0);
        tblEmp.getColumnModel().getColumn(6).setMaxWidth(0); 
    }
      public void loadProduct()
    {
        ArrayList<Employee> list=EmpDAO.getEmployee();
        if(list!=null){
        DefaultTableModel model=(DefaultTableModel) tblEmp.getModel();
        tblEmp.getColumnModel().getColumn(4).setMinWidth(0);
        tblEmp.getColumnModel().getColumn(4).setMaxWidth(0);
        tblEmp.getColumnModel().getColumn(5).setMinWidth(0);
        tblEmp.getColumnModel().getColumn(5).setMaxWidth(0); 
        tblEmp.getColumnModel().getColumn(6).setMinWidth(0);
        tblEmp.getColumnModel().getColumn(6).setMaxWidth(0); 
        SimpleDateFormat d = new SimpleDateFormat("MM/dd/yyyy");
        while(model.getRowCount()!=0)
        {
            model.removeRow(0);
        }
        for(Employee e: list)
        {
            model.addRow(new Object[]{e.getEmpID(),e.getFullname(),e.getPhone(),e.getEmail(),e.getAddress(),d.format(e.getDateOfBirth()),e.isIsDelete()});
        }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblEmp = new javax.swing.JTable();
        btnGetAll = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtEmpID = new javax.swing.JTextField();
        txtfullname = new javax.swing.JTextField();
        txtphone = new javax.swing.JTextField();
        txtemail = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtaddress = new javax.swing.JTextArea();
        txtDOB = new javax.swing.JTextField();
        btnFind = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblEmp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "EmpID", "Fullname", "Phone", "Email", "Address", "DOB", "Title 7"
            }
        ));
        tblEmp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEmpMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblEmp);

        btnGetAll.setText("Get All Employee");
        btnGetAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addComponent(btnGetAll))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnGetAll)
                .addGap(0, 17, Short.MAX_VALUE))
        );

        jLabel3.setForeground(new java.awt.Color(204, 0, 0));
        jLabel3.setText("EmpID:");

        jLabel4.setText("Fullname:");

        jLabel5.setText("Phone:");

        jLabel6.setText("Email:");

        jLabel7.setText("Address:");

        jLabel8.setText("DOB:");

        txtEmpID.setBackground(new java.awt.Color(255, 204, 204));
        txtEmpID.setForeground(new java.awt.Color(204, 0, 0));

        txtfullname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfullnameActionPerformed(evt);
            }
        });

        txtemail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtemailActionPerformed(evt);
            }
        });

        txtaddress.setColumns(20);
        txtaddress.setRows(5);
        jScrollPane3.setViewportView(txtaddress);

        btnFind.setText("Find By ID");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnRemove.setText("Delete");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(btnCreate)
                        .addGap(18, 18, 18)
                        .addComponent(btnReset)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemove))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel8)
                            .addGap(53, 53, 53)
                            .addComponent(txtDOB))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtphone, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel3))
                            .addGap(21, 21, 21)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(txtEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnFind, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(txtfullname, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtemail)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)))))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFind))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(txtfullname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(txtphone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(txtemail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(85, 85, 85))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate)
                    .addComponent(btnReset)
                    .addComponent(btnUpdate)
                    .addComponent(btnRemove))
                .addContainerGap(108, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel2);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("Employee Management");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 0, 0));
        jLabel2.setText("Employee's Details");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)))
            .addGroup(layout.createSequentialGroup()
                .addGap(301, 301, 301)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtfullnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfullnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfullnameActionPerformed

    private void txtemailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtemailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtemailActionPerformed

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        // TODO add your handling code here:
        try {
            SimpleDateFormat d = new SimpleDateFormat("MM/dd/yyyy");
            if(find)
            {
            tblEmp.setSelectionMode(0);
            txtEmpID.setText("");
            txtfullname.setText("");
            txtphone.setText("");
            txtemail.setText("");
            txtaddress.setText("");
            txtDOB.setText("");
            txtEmpID.setEnabled(true);
            txtEmpID.requestFocus();
            txtfullname.setEnabled(false);
            txtphone.setEnabled(false);
            txtemail.setEnabled(false);
            txtaddress.setEnabled(false);
            txtDOB.setEnabled(false);
            find=false;
            }else
            {
                String empID=txtEmpID.getText();
                if(empID.isEmpty())
                {
                    JOptionPane.showMessageDialog(null, "ID must be fill.");
                    txtEmpID.requestFocus();
                    return;
                }
            Employee e=EmpDAO.getEmpbyEmpID(empID);
            if(e!=null)
            {
            txtEmpID.setText(e.getEmpID());
            txtfullname.setText(e.getFullname());
            txtphone.setText(e.getPhone());
            txtemail.setText(e.getEmail());
            txtaddress.setText(e.getAddress());
            txtDOB.setText(d.format(e.getDateOfBirth()));
//            txtEmpID.setEnabled(false);
            txtfullname.setEnabled(true);
            txtphone.setEnabled(true);
            txtemail.setEnabled(true);
            txtaddress.setEnabled(true);
            txtDOB.setEnabled(true);
            find=true;
            }else{
                JOptionPane.showMessageDialog(null, "This ID is not exits.");
                txtEmpID.requestFocus();
                return;
            }
            }
        } catch (NullPointerException e) {
           JOptionPane.showMessageDialog(null, "This ID is not exits.");
        }
    }//GEN-LAST:event_btnFindActionPerformed
     public boolean checkID(String empID)
    {
        ArrayList<Employee> list=EmpDAO.getEmpID();
        try {
            for (Employee employee : list) {
            if(employee.getEmpID().equals(empID))
            {
                return true;
            }
        }
        } catch (Exception e) {
           JOptionPane.showMessageDialog(null, e);
        }
        return false;
    }
    public boolean isThisDateValid(String dateToValidate, String dateFromat) {
        SimpleDateFormat sdf = new SimpleDateFormat(dateFromat);
        sdf.setLenient(false);
        try {
            //if not valid, it will throw ParseException
            sdf.parse(dateToValidate);
        } catch (ParseException e) {
            return false;
        }
        return true;
    }
    static boolean isValidEmail(String email) {
      String regex = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
      return email.matches(regex);
   }
    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
         try {
            String Eid=txtEmpID.getText();
            if(checkID(Eid))
            {
                JOptionPane.showMessageDialog(null, "This ID is not allow duplicate.");
                txtEmpID.requestFocus();
                return;
            }else if(Eid.isEmpty())
            {
                JOptionPane.showMessageDialog(null, "ID must be filled.");
                txtEmpID.requestFocus();
                return;
            }else if(Eid.contains("@") || Eid.contains("#") || Eid.contains("$"))
            {
                JOptionPane.showMessageDialog(null, "ID not contains @,#,$");
                txtEmpID.requestFocus();
                return;
            }else if(Eid.length()>10)
            {
                JOptionPane.showMessageDialog(null, "ID must be less than 10 characters.");
                txtEmpID.requestFocus();
                return;
            }
            String EName=txtfullname.getText();
            if(EName.isEmpty() || EName.length()>30)
                {
                    JOptionPane.showMessageDialog(null, "Name must be filled.\nName must less than 30 characters.");
                    txtfullname.requestFocus();
                    return;
                }
            String phone=txtphone.getText();
            if(!phone.matches("[0-9]{10,15}"))
            {
                JOptionPane.showMessageDialog(null, "Phone must be number[0-9].\nPhone must less than 15 characters.");
                txtphone.requestFocus();
                return;
            }else if(phone.isEmpty())
            {
                JOptionPane.showMessageDialog(null, "Phone must be filled.");
                txtphone.requestFocus();
                return;
            }
             String email=txtemail.getText();
            if(email.isEmpty()){
                JOptionPane.showMessageDialog(null, "Email must be filled.");
                txtemail.requestFocus();
                return;
            }else if(!isValidEmail(email))
            {
                JOptionPane.showMessageDialog(null, "Email must be correct format.\nEx:haohao@gmail.com");
                txtemail.requestFocus();
                return;
            }else if(email.length()>30)
            {
                JOptionPane.showMessageDialog(null, "Email must be less than 30 characters.");
                txtemail.requestFocus();
                return;
            }
            String address=txtaddress.getText();
             if(address.isEmpty() || address.length()>300)
                {
                    JOptionPane.showMessageDialog(null, "Address must be filled.\nAddress must less than 300 characters.");
                    txtaddress.requestFocus();
                    return;
                }
            String date=txtDOB.getText();
            SimpleDateFormat d =new SimpleDateFormat();
            java.sql.Date sqlDate =null;
            d = new SimpleDateFormat("MM/dd/yyyy");
            java.util.Date day = d.parse(date);
            sqlDate = new java.sql.Date(day.getTime());
            if(date.isEmpty())
            {
                JOptionPane.showMessageDialog(null, "Date must be filled.");
                txtDOB.requestFocus();
                return;
            }
             if(!isThisDateValid(date,"MM/dd/yyyy"))
             {
                 JOptionPane.showMessageDialog(null, "Must be correct format MM/dd/yyyy");
                txtDOB.requestFocus();
                return;
             }
            if (JOptionPane.showConfirmDialog(null, "Do you want to create?", null, JOptionPane.YES_NO_OPTION) == 0) {
            Employee e=new Employee(Eid, EName, phone, email, address,sqlDate,false);
            if(EmpDAO.createEmployee(e)!=0)
            {
                JOptionPane.showMessageDialog(null, "Added Successfull.");
                loadProduct();
                txtEmpID.setText("");
                txtfullname.setText("");
                txtphone.setText("");
                txtemail.setText("");
                txtaddress.setText("");
                txtDOB.setText("");
                txtEmpID.setEnabled(true);
                txtfullname.setEnabled(true);
                txtphone.setEnabled(true);
                txtemail.setEnabled(true);
                txtaddress.setEnabled(true);
                txtDOB.setEnabled(true);
            }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Must be correct format MM/dd/yyyy");
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
         try {
            txtEmpID.requestFocus();
            tblEmp.setSelectionMode(0);
            txtEmpID.setText("");
            txtfullname.setText("");
            txtphone.setText("");
            txtemail.setText("");
            txtaddress.setText("");
            txtDOB.setText("");
            txtEmpID.setEnabled(true);
            txtfullname.setEnabled(true);
            txtphone.setEnabled(true);
            txtemail.setEnabled(true);
            txtaddress.setEnabled(true);
            txtDOB.setEnabled(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        try {
            String Eid=txtEmpID.getText();
            if(Eid.isEmpty())
            {
                JOptionPane.showMessageDialog(null, "You cannot update without ID.");
                txtEmpID.requestFocus();
                return;
            }
             String EName=txtfullname.getText();
            if(EName.isEmpty() || EName.length()>30)
                {
                    JOptionPane.showMessageDialog(null, "Name must be filled.\nName must less than 30 characters.");
                    txtfullname.requestFocus();
                    return;
                }
            String phone=txtphone.getText();
            if(!phone.matches("[0-9]{10,15}"))
            {
                JOptionPane.showMessageDialog(null, "Phone must be number[0-9].\nPhone must less than 15 characters.");
                txtphone.requestFocus();
                return;
            }else if(phone.isEmpty())
            {
                JOptionPane.showMessageDialog(null, "Phone must be filled.");
                txtphone.requestFocus();
                return;
            }
             String email=txtemail.getText();
            if(email.isEmpty()){
                JOptionPane.showMessageDialog(null, "Email must be filled.");
                txtemail.requestFocus();
                return;
            }else if(!isValidEmail(email))
            {
                JOptionPane.showMessageDialog(null, "Email must be correct format.\nEx:haohao@gmail.com");
                txtemail.requestFocus();
                return;
            }else if(email.length()>30)
            {
                JOptionPane.showMessageDialog(null, "Email must be less than 30 characters.");
                txtemail.requestFocus();
                return;
            }
            String address=txtaddress.getText();
             if(address.isEmpty() || address.length()>300)
                {
                    JOptionPane.showMessageDialog(null, "Address must be filled.\nAddress must less than 300 characters.");
                    txtaddress.requestFocus();
                    return;
                }
              String date=txtDOB.getText();
            SimpleDateFormat d =new SimpleDateFormat();
            java.sql.Date sqlDate =null;
            d = new SimpleDateFormat("MM/dd/yyyy");
            java.util.Date day = d.parse(date);
            sqlDate = new java.sql.Date(day.getTime());
            if(date.isEmpty())
            {
                JOptionPane.showMessageDialog(null, "Date must be filled.");
                txtDOB.requestFocus();
                return;
            }
             if(!isThisDateValid(date,"MM/dd/yyyy"))
             {
                 JOptionPane.showMessageDialog(null, "Must be correct format MM/dd/yyyy");
                txtDOB.requestFocus();
                return;
             }
            if (JOptionPane.showConfirmDialog(null, "Do you want to update?", null, JOptionPane.YES_NO_OPTION) == 0) {
            Employee e=new Employee(Eid, EName, phone, email, address,sqlDate, false);
            if(EmpDAO.updateSupplier(e)!=0)
            {
                JOptionPane.showMessageDialog(null, "Update Successfull.");
                loadProduct();
                txtEmpID.setText("");
                txtfullname.setText("");
                txtphone.setText("");
                txtemail.setText("");
                txtaddress.setText("");
                txtDOB.setText("");
                txtEmpID.setEnabled(true);
                txtfullname.setEnabled(true);
                txtphone.setEnabled(true);
                txtemail.setEnabled(true);
                txtaddress.setEnabled(true);
                txtDOB.setEnabled(true);
            }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
         try {
            if (JOptionPane.showConfirmDialog(null, "Do you want to delete?", null, JOptionPane.YES_NO_OPTION) == 0) {
                int pos=tblEmp.getSelectedRow();
                String Eid=(String)tblEmp.getValueAt(pos, 0);
                if(EmpDAO.deleteEmployee(Eid)!=0)
                {
                    JOptionPane.showMessageDialog(null, "Delete Successfull.");
                    loadProduct();
                    txtEmpID.setText("");
                    txtfullname.setText("");
                    txtphone.setText("");
                    txtemail.setText("");
                    txtaddress.setText("");
                    txtDOB.setText("");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,e);
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnGetAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetAllActionPerformed
        // TODO add your handling code here:
          try {
            loadProduct();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_btnGetAllActionPerformed

    private void tblEmpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEmpMouseClicked
        // TODO add your handling code here:
         try {
            int pos=tblEmp.getSelectedRow();
            if(pos>0)
            {
                txtEmpID.setText(""+tblEmp.getValueAt(pos, 0));
//                txtEmpID.setEnabled(false);
//                txtEmpID.setBackground(Color.pink);
                txtfullname.setText(""+tblEmp.getValueAt(pos, 1));
                txtphone.setText(""+tblEmp.getValueAt(pos, 2));
                txtemail.setText(""+tblEmp.getValueAt(pos, 3));
                txtaddress.setText(""+tblEmp.getValueAt(pos, 4));
                txtDOB.setText(""+tblEmp.getValueAt(pos, 5));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_tblEmpMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnGetAll;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblEmp;
    private javax.swing.JTextField txtDOB;
    private javax.swing.JTextField txtEmpID;
    private javax.swing.JTextArea txtaddress;
    private javax.swing.JTextField txtemail;
    private javax.swing.JTextField txtfullname;
    private javax.swing.JTextField txtphone;
    // End of variables declaration//GEN-END:variables
}
